"environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'APPDATA': 'C:\\\\Users\\\\jack\\\\AppData\\\\Roaming', 'ASL.LOG': 'Destination=file', 'AV_APPDATA': 'C:\\\\Users\\\\jack\\\\AppData\\\\Roaming', 'CATALINA_HOME': 'D:\\\\apache-tomcat-8.5.11', 'CLASSPATH': '.;D:\\\\jdk_8u77\\\\lib\\\\dt.jar;D:\\\\jdk_8u77\\\\lib\\\\tools.jar; ', 'COMMONPROGRAMFILES': 'C:\\\\Program Files\\\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\\\Program Files (x86)\\\\Common Files', 'COMMONPROGRAMW6432': 'C:\\\\Program Files\\\\Common Files', 'COMPUTERNAME': 'DESKTOP-N3JPN68', 'COMSPEC': 'C:\\\\Windows\\\\system32\\\\cmd.exe', 'CYGWIN': 'mintty', 'DRIVERDATA': 'C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\\\Users\\\\jack', 'HTTP_PROXY': '127.0.0.1:10809', 'IDEA_INITIAL_DIRECTORY': 'D:\\\\PyCharm\\\\bin', 'JAVA_HOME': 'D:\\\\jdk_8u77', 'LNKENV': 'C:\\\\Program Files (x86)\\\\Internet Explorer\\\\IEXPLORE.EXE', 'LOCALAPPDATA': 'C:\\\\Users\\\\jack\\\\AppData\\\\Local', 'LOGONSERVER': '\\\\\\\\DESKTOP-N3JPN68', 'MOZ_PLUGIN_PATH': 'E:\\\\Foxit Reader\\\\Foxit PDF Reader\\\\plugins\\\\', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\\\Users\\\\jack\\\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'D:\\\\XFTP\\\\;D:\\\\XShell\\\\;C:\\\\ProgramData\\\\Oracle\\\\Java\\\\javapath;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\110\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\120\\\\Tools\\\\Binn\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\110\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\110\\\\DTS\\\\Binn\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\110\\\\Tools\\\\Binn\\\\ManagementStudio\\\\;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\Common7\\\\IDE\\\\PrivateAssemblies\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\110\\\\DTS\\\\Binn\\\\;D:\\\\jdk_8u77\\\\bin;D:\\\\jdk_8u77\\\\jre\\\\bin;D:\\\\apache-tomcat-8.5.11\\\\bin;D:\\\\Python27;D:\\\\ADB;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;D:\\\\Matlab\\\\bin;D:\\\\openssh\\\\bin;C:\\\\Program Files\\\\Intel\\\\WiFi\\\\bin\\\\;C:\\\\Program Files\\\\Common Files\\\\Intel\\\\WirelessCommon\\\\;C:\\\\Program Files (x86)\\\\ATI Technologies\\\\ATI.ACE\\\\Core-Static;D:\\\\Git\\\\cmd;C:\\\\Users\\\\jack\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\Scripts\\\\;C:\\\\Users\\\\jack\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\;C:\\\\Users\\\\jack\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\Program Files\\\\Intel\\\\WiFi\\\\bin\\\\;C:\\\\Program Files\\\\Common Files\\\\Intel\\\\WirelessCommon\\\\;E:\\\\Microsoft VS Code\\\\bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '3a09', 'PROGRAMDATA': 'C:\\\\ProgramData', 'PROGRAMFILES': 'C:\\\\Program Files', 'PROGRAMFILES(X86)': 'C:\\\\Program Files (x86)', 'PROGRAMW6432': 'C:\\\\Program Files', 'PSMODULEPATH': 'C:\\\\Program Files\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\110\\\\Tools\\\\PowerShell\\\\Modules\\\\', 'PUBLIC': 'C:\\\\Users\\\\Public', 'PYCHARM_HOSTED': '1', 'PYTHONIOENCODING': 'UTF-8', 'PYTHONPATH': 'D:\\\\trojan', 'PYTHONUNBUFFERED': '1', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\\\Windows', 'TEMP': 'C:\\\\Users\\\\jack\\\\AppData\\\\Local\\\\Temp', 'TMP': 'C:\\\\Users\\\\jack\\\\AppData\\\\Local\\\\Temp', 'USERDOMAIN': 'DESKTOP-N3JPN68', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-N3JPN68', 'USERNAME': 'jack', 'USERPROFILE': 'C:\\\\Users\\\\jack', 'VBOX_MSI_INSTALL_PATH': 'D:\\\\Virtualbox\\\\', 'VS110COMNTOOLS': 'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 11.0\\\\Common7\\\\Tools\\\\', 'VS120COMNTOOLS': 'D:\\\\Visual Studio 2013\\\\Common7\\\\Tools\\\\', 'WINDIR': 'C:\\\\Windows'})"